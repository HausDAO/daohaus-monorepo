/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TributeEscrowInterface extends utils.Interface {
  functions: {
    "encodeTributeProposal(address,uint256,uint256,address,uint32,address)": FunctionFragment;
    "releaseEscrow(address,uint32)": FunctionFragment;
    "submitTributeProposal(address,address,uint256,uint256,uint256,uint32,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "encodeTributeProposal"
      | "releaseEscrow"
      | "submitTributeProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeTributeProposal",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTributeProposal",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeTributeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTributeProposal",
    data: BytesLike
  ): Result;

  events: {
    "TributeProposal(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TributeProposal"): EventFragment;
}

export interface TributeProposalEventObject {
  baal: string;
  token: string;
  amount: BigNumber;
  recipient: string;
  proposalId: BigNumber;
}
export type TributeProposalEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TributeProposalEventObject
>;

export type TributeProposalEventFilter = TypedEventFilter<TributeProposalEvent>;

export interface TributeEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TributeEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeTributeProposal(
      baal: string,
      shares: BigNumberish,
      loot: BigNumberish,
      recipient: string,
      proposalId: BigNumberish,
      escrow: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    releaseEscrow(
      _baal: string,
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTributeProposal(
      baal: string,
      token: string,
      amount: BigNumberish,
      shares: BigNumberish,
      loot: BigNumberish,
      expiration: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  encodeTributeProposal(
    baal: string,
    shares: BigNumberish,
    loot: BigNumberish,
    recipient: string,
    proposalId: BigNumberish,
    escrow: string,
    overrides?: CallOverrides
  ): Promise<string>;

  releaseEscrow(
    _baal: string,
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTributeProposal(
    baal: string,
    token: string,
    amount: BigNumberish,
    shares: BigNumberish,
    loot: BigNumberish,
    expiration: BigNumberish,
    details: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    encodeTributeProposal(
      baal: string,
      shares: BigNumberish,
      loot: BigNumberish,
      recipient: string,
      proposalId: BigNumberish,
      escrow: string,
      overrides?: CallOverrides
    ): Promise<string>;

    releaseEscrow(
      _baal: string,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTributeProposal(
      baal: string,
      token: string,
      amount: BigNumberish,
      shares: BigNumberish,
      loot: BigNumberish,
      expiration: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TributeProposal(address,address,uint256,address,uint256)"(
      baal?: string | null,
      token?: null,
      amount?: null,
      recipient?: null,
      proposalId?: null
    ): TributeProposalEventFilter;
    TributeProposal(
      baal?: string | null,
      token?: null,
      amount?: null,
      recipient?: null,
      proposalId?: null
    ): TributeProposalEventFilter;
  };

  estimateGas: {
    encodeTributeProposal(
      baal: string,
      shares: BigNumberish,
      loot: BigNumberish,
      recipient: string,
      proposalId: BigNumberish,
      escrow: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseEscrow(
      _baal: string,
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTributeProposal(
      baal: string,
      token: string,
      amount: BigNumberish,
      shares: BigNumberish,
      loot: BigNumberish,
      expiration: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeTributeProposal(
      baal: string,
      shares: BigNumberish,
      loot: BigNumberish,
      recipient: string,
      proposalId: BigNumberish,
      escrow: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseEscrow(
      _baal: string,
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTributeProposal(
      baal: string,
      token: string,
      amount: BigNumberish,
      shares: BigNumberish,
      loot: BigNumberish,
      expiration: BigNumberish,
      details: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
