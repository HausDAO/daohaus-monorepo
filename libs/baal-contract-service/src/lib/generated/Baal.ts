/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BaalInterface extends utils.Interface {
  functions: {
    "adminLock()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "avatar()": FunctionFragment;
    "burnLoot(address[],uint256[])": FunctionFragment;
    "burnShares(address[],uint256[])": FunctionFragment;
    "cancelProposal(uint32)": FunctionFragment;
    "executeAsBaal(address,uint256,bytes)": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getGuard()": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "getProposalStatus(uint32)": FunctionFragment;
    "governorLock()": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "guard()": FunctionFragment;
    "hashOperation(bytes)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "latestSponsoredProposalId()": FunctionFragment;
    "lockAdmin()": FunctionFragment;
    "lockGovernor()": FunctionFragment;
    "lockManager()": FunctionFragment;
    "lootPaused()": FunctionFragment;
    "lootToken()": FunctionFragment;
    "managerLock()": FunctionFragment;
    "memberVoted(address,uint32)": FunctionFragment;
    "minRetentionPercent()": FunctionFragment;
    "mintLoot(address[],uint256[])": FunctionFragment;
    "mintShares(address[],uint256[])": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "processProposal(uint32,bytes)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalOffering()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorumPercent()": FunctionFragment;
    "ragequit(address,uint256,uint256,address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminConfig(bool,bool)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGovernanceConfig(bytes)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setShamans(address[],uint256[])": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "shamans(address)": FunctionFragment;
    "sharesPaused()": FunctionFragment;
    "sharesToken()": FunctionFragment;
    "sponsorProposal(uint32)": FunctionFragment;
    "sponsorThreshold()": FunctionFragment;
    "state(uint32)": FunctionFragment;
    "submitProposal(bytes,uint32,uint256,string)": FunctionFragment;
    "submitVote(uint32,bool)": FunctionFragment;
    "submitVoteWithSig(uint32,bool,bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "totalLoot()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adminLock"
      | "allowance"
      | "avatar"
      | "burnLoot"
      | "burnShares"
      | "cancelProposal"
      | "executeAsBaal"
      | "getCurrentVotes"
      | "getGuard"
      | "getPriorVotes"
      | "getProposalStatus"
      | "governorLock"
      | "gracePeriod"
      | "guard"
      | "hashOperation"
      | "isAdmin"
      | "isGovernor"
      | "isManager"
      | "latestSponsoredProposalId"
      | "lockAdmin"
      | "lockGovernor"
      | "lockManager"
      | "lootPaused"
      | "lootToken"
      | "managerLock"
      | "memberVoted"
      | "minRetentionPercent"
      | "mintLoot"
      | "mintShares"
      | "nonces"
      | "owner"
      | "processProposal"
      | "proposalCount"
      | "proposalOffering"
      | "proposals"
      | "quorumPercent"
      | "ragequit"
      | "renounceOwnership"
      | "setAdminConfig"
      | "setAvatar"
      | "setGovernanceConfig"
      | "setGuard"
      | "setShamans"
      | "setTarget"
      | "setUp"
      | "shamans"
      | "sharesPaused"
      | "sharesToken"
      | "sponsorProposal"
      | "sponsorThreshold"
      | "state"
      | "submitProposal"
      | "submitVote"
      | "submitVoteWithSig"
      | "target"
      | "totalLoot"
      | "totalShares"
      | "totalSupply"
      | "transferOwnership"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "adminLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAsBaal",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governorLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestSponsoredProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lootToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberVoted",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minRetentionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalOffering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminConfig",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernanceConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setShamans",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "shamans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharesPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVoteWithSig",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "adminLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAsBaal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestSponsoredProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lootPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lootToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRetentionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalOffering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShamans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shamans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AvatarSet(address,address)": EventFragment;
    "CancelProposal(uint256)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "GovernanceConfigSet(uint32,uint32,uint256,uint256,uint256,uint256)": EventFragment;
    "LootPaused(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessProposal(uint256,bool,bool)": EventFragment;
    "Ragequit(address,address,uint256,uint256,address[])": EventFragment;
    "SetupComplete(bool,bool,uint32,uint32,uint256,uint256,uint256,uint256,string,string,uint256,uint256)": EventFragment;
    "ShamanSet(address,uint256)": EventFragment;
    "SharesPaused(bool)": EventFragment;
    "SponsorProposal(address,uint256,uint256)": EventFragment;
    "SubmitProposal(uint256,bytes32,uint256,bytes,uint256,uint256,bool,uint256,string)": EventFragment;
    "SubmitVote(address,uint256,uint256,bool)": EventFragment;
    "TargetSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LootPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShamanSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AvatarSetEventObject {
  previousAvatar: string;
  newAvatar: string;
}
export type AvatarSetEvent = TypedEvent<[string, string], AvatarSetEventObject>;

export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;

export interface CancelProposalEventObject {
  proposal: BigNumber;
}
export type CancelProposalEvent = TypedEvent<
  [BigNumber],
  CancelProposalEventObject
>;

export type CancelProposalEventFilter = TypedEventFilter<CancelProposalEvent>;

export interface ChangedGuardEventObject {
  guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export interface GovernanceConfigSetEventObject {
  voting: number;
  grace: number;
  newOffering: BigNumber;
  quorum: BigNumber;
  sponsor: BigNumber;
  minRetention: BigNumber;
}
export type GovernanceConfigSetEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, BigNumber, BigNumber],
  GovernanceConfigSetEventObject
>;

export type GovernanceConfigSetEventFilter =
  TypedEventFilter<GovernanceConfigSetEvent>;

export interface LootPausedEventObject {
  paused: boolean;
}
export type LootPausedEvent = TypedEvent<[boolean], LootPausedEventObject>;

export type LootPausedEventFilter = TypedEventFilter<LootPausedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProcessProposalEventObject {
  proposal: BigNumber;
  passed: boolean;
  actionFailed: boolean;
}
export type ProcessProposalEvent = TypedEvent<
  [BigNumber, boolean, boolean],
  ProcessProposalEventObject
>;

export type ProcessProposalEventFilter = TypedEventFilter<ProcessProposalEvent>;

export interface RagequitEventObject {
  member: string;
  to: string;
  lootToBurn: BigNumber;
  sharesToBurn: BigNumber;
  tokens: string[];
}
export type RagequitEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string[]],
  RagequitEventObject
>;

export type RagequitEventFilter = TypedEventFilter<RagequitEvent>;

export interface SetupCompleteEventObject {
  lootPaused: boolean;
  sharesPaused: boolean;
  gracePeriod: number;
  votingPeriod: number;
  proposalOffering: BigNumber;
  quorumPercent: BigNumber;
  sponsorThreshold: BigNumber;
  minRetentionPercent: BigNumber;
  name: string;
  symbol: string;
  totalShares: BigNumber;
  totalLoot: BigNumber;
}
export type SetupCompleteEvent = TypedEvent<
  [
    boolean,
    boolean,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ],
  SetupCompleteEventObject
>;

export type SetupCompleteEventFilter = TypedEventFilter<SetupCompleteEvent>;

export interface ShamanSetEventObject {
  shaman: string;
  permission: BigNumber;
}
export type ShamanSetEvent = TypedEvent<
  [string, BigNumber],
  ShamanSetEventObject
>;

export type ShamanSetEventFilter = TypedEventFilter<ShamanSetEvent>;

export interface SharesPausedEventObject {
  paused: boolean;
}
export type SharesPausedEvent = TypedEvent<[boolean], SharesPausedEventObject>;

export type SharesPausedEventFilter = TypedEventFilter<SharesPausedEvent>;

export interface SponsorProposalEventObject {
  member: string;
  proposal: BigNumber;
  votingStarts: BigNumber;
}
export type SponsorProposalEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SponsorProposalEventObject
>;

export type SponsorProposalEventFilter = TypedEventFilter<SponsorProposalEvent>;

export interface SubmitProposalEventObject {
  proposal: BigNumber;
  proposalDataHash: string;
  votingPeriod: BigNumber;
  proposalData: string;
  expiration: BigNumber;
  baalGas: BigNumber;
  selfSponsor: boolean;
  timestamp: BigNumber;
  details: string;
}
export type SubmitProposalEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    string
  ],
  SubmitProposalEventObject
>;

export type SubmitProposalEventFilter = TypedEventFilter<SubmitProposalEvent>;

export interface SubmitVoteEventObject {
  member: string;
  balance: BigNumber;
  proposal: BigNumber;
  approved: boolean;
}
export type SubmitVoteEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  SubmitVoteEventObject
>;

export type SubmitVoteEventFilter = TypedEventFilter<SubmitVoteEvent>;

export interface TargetSetEventObject {
  previousTarget: string;
  newTarget: string;
}
export type TargetSetEvent = TypedEvent<[string, string], TargetSetEventObject>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export interface Baal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminLock(overrides?: CallOverrides): Promise<[boolean]>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    avatar(overrides?: CallOverrides): Promise<[string]>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votes: BigNumber }>;

    getGuard(overrides?: CallOverrides): Promise<[string] & { _guard: string }>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { votes: BigNumber }>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, boolean, boolean, boolean]]>;

    governorLock(overrides?: CallOverrides): Promise<[boolean]>;

    gracePeriod(overrides?: CallOverrides): Promise<[number]>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    isAdmin(shaman: string, overrides?: CallOverrides): Promise<[boolean]>;

    isGovernor(shaman: string, overrides?: CallOverrides): Promise<[boolean]>;

    isManager(shaman: string, overrides?: CallOverrides): Promise<[boolean]>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<[number]>;

    lockAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lootPaused(overrides?: CallOverrides): Promise<[boolean]>;

    lootToken(overrides?: CallOverrides): Promise<[string]>;

    managerLock(overrides?: CallOverrides): Promise<[boolean]>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minRetentionPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<[number]>;

    proposalOffering(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: number;
        prevProposalId: number;
        votingStarts: number;
        votingEnds: number;
        graceEnds: number;
        expiration: number;
        baalGas: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        maxTotalSharesAndLootAtYesVote: BigNumber;
        sponsor: string;
        proposalDataHash: string;
        details: string;
      }
    >;

    quorumPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    sharesPaused(overrides?: CallOverrides): Promise<[boolean]>;

    sharesToken(overrides?: CallOverrides): Promise<[string]>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    state(id: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    totalLoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[number]>;
  };

  adminLock(overrides?: CallOverrides): Promise<boolean>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  avatar(overrides?: CallOverrides): Promise<string>;

  burnLoot(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnShares(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProposal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeAsBaal(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  getPriorVotes(
    account: string,
    timeStamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalStatus(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean]>;

  governorLock(overrides?: CallOverrides): Promise<boolean>;

  gracePeriod(overrides?: CallOverrides): Promise<number>;

  guard(overrides?: CallOverrides): Promise<string>;

  hashOperation(
    _transactions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isAdmin(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  isGovernor(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  isManager(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;

  lockAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lootPaused(overrides?: CallOverrides): Promise<boolean>;

  lootToken(overrides?: CallOverrides): Promise<string>;

  managerLock(overrides?: CallOverrides): Promise<boolean>;

  memberVoted(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  mintLoot(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintShares(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  processProposal(
    id: BigNumberish,
    proposalData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposalCount(overrides?: CallOverrides): Promise<number>;

  proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      id: number;
      prevProposalId: number;
      votingStarts: number;
      votingEnds: number;
      graceEnds: number;
      expiration: number;
      baalGas: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      sponsor: string;
      proposalDataHash: string;
      details: string;
    }
  >;

  quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  ragequit(
    to: string,
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdminConfig(
    pauseShares: boolean,
    pauseLoot: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernanceConfig(
    _governanceConfig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuard(
    _guard: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShamans(
    _shamans: string[],
    _permissions: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    _initializationParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  sharesPaused(overrides?: CallOverrides): Promise<boolean>;

  sharesToken(overrides?: CallOverrides): Promise<string>;

  sponsorProposal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  state(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  submitProposal(
    proposalData: BytesLike,
    expiration: BigNumberish,
    baalGas: BigNumberish,
    details: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitVote(
    id: BigNumberish,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitVoteWithSig(
    id: BigNumberish,
    approved: boolean,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    adminLock(overrides?: CallOverrides): Promise<boolean>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<string>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean]>;

    governorLock(overrides?: CallOverrides): Promise<boolean>;

    gracePeriod(overrides?: CallOverrides): Promise<number>;

    guard(overrides?: CallOverrides): Promise<string>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isAdmin(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    isGovernor(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    isManager(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;

    lockAdmin(overrides?: CallOverrides): Promise<void>;

    lockGovernor(overrides?: CallOverrides): Promise<void>;

    lockManager(overrides?: CallOverrides): Promise<void>;

    lootPaused(overrides?: CallOverrides): Promise<boolean>;

    lootToken(overrides?: CallOverrides): Promise<string>;

    managerLock(overrides?: CallOverrides): Promise<boolean>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCount(overrides?: CallOverrides): Promise<number>;

    proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
      ] & {
        id: number;
        prevProposalId: number;
        votingStarts: number;
        votingEnds: number;
        graceEnds: number;
        expiration: number;
        baalGas: BigNumber;
        yesVotes: BigNumber;
        noVotes: BigNumber;
        maxTotalSharesAndLootAtYesVote: BigNumber;
        sponsor: string;
        proposalDataHash: string;
        details: string;
      }
    >;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(_target: string, overrides?: CallOverrides): Promise<void>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sharesPaused(overrides?: CallOverrides): Promise<boolean>;

    sharesToken(overrides?: CallOverrides): Promise<string>;

    sponsorProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    state(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "AvatarSet(address,address)"(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;
    AvatarSet(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;

    "CancelProposal(uint256)"(
      proposal?: BigNumberish | null
    ): CancelProposalEventFilter;
    CancelProposal(proposal?: BigNumberish | null): CancelProposalEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "GovernanceConfigSet(uint32,uint32,uint256,uint256,uint256,uint256)"(
      voting?: null,
      grace?: null,
      newOffering?: null,
      quorum?: null,
      sponsor?: null,
      minRetention?: null
    ): GovernanceConfigSetEventFilter;
    GovernanceConfigSet(
      voting?: null,
      grace?: null,
      newOffering?: null,
      quorum?: null,
      sponsor?: null,
      minRetention?: null
    ): GovernanceConfigSetEventFilter;

    "LootPaused(bool)"(paused?: null): LootPausedEventFilter;
    LootPaused(paused?: null): LootPausedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProcessProposal(uint256,bool,bool)"(
      proposal?: BigNumberish | null,
      passed?: null,
      actionFailed?: null
    ): ProcessProposalEventFilter;
    ProcessProposal(
      proposal?: BigNumberish | null,
      passed?: null,
      actionFailed?: null
    ): ProcessProposalEventFilter;

    "Ragequit(address,address,uint256,uint256,address[])"(
      member?: string | null,
      to?: null,
      lootToBurn?: BigNumberish | null,
      sharesToBurn?: BigNumberish | null,
      tokens?: null
    ): RagequitEventFilter;
    Ragequit(
      member?: string | null,
      to?: null,
      lootToBurn?: BigNumberish | null,
      sharesToBurn?: BigNumberish | null,
      tokens?: null
    ): RagequitEventFilter;

    "SetupComplete(bool,bool,uint32,uint32,uint256,uint256,uint256,uint256,string,string,uint256,uint256)"(
      lootPaused?: null,
      sharesPaused?: null,
      gracePeriod?: null,
      votingPeriod?: null,
      proposalOffering?: null,
      quorumPercent?: null,
      sponsorThreshold?: null,
      minRetentionPercent?: null,
      name?: null,
      symbol?: null,
      totalShares?: null,
      totalLoot?: null
    ): SetupCompleteEventFilter;
    SetupComplete(
      lootPaused?: null,
      sharesPaused?: null,
      gracePeriod?: null,
      votingPeriod?: null,
      proposalOffering?: null,
      quorumPercent?: null,
      sponsorThreshold?: null,
      minRetentionPercent?: null,
      name?: null,
      symbol?: null,
      totalShares?: null,
      totalLoot?: null
    ): SetupCompleteEventFilter;

    "ShamanSet(address,uint256)"(
      shaman?: string | null,
      permission?: null
    ): ShamanSetEventFilter;
    ShamanSet(shaman?: string | null, permission?: null): ShamanSetEventFilter;

    "SharesPaused(bool)"(paused?: null): SharesPausedEventFilter;
    SharesPaused(paused?: null): SharesPausedEventFilter;

    "SponsorProposal(address,uint256,uint256)"(
      member?: string | null,
      proposal?: BigNumberish | null,
      votingStarts?: BigNumberish | null
    ): SponsorProposalEventFilter;
    SponsorProposal(
      member?: string | null,
      proposal?: BigNumberish | null,
      votingStarts?: BigNumberish | null
    ): SponsorProposalEventFilter;

    "SubmitProposal(uint256,bytes32,uint256,bytes,uint256,uint256,bool,uint256,string)"(
      proposal?: BigNumberish | null,
      proposalDataHash?: BytesLike | null,
      votingPeriod?: null,
      proposalData?: null,
      expiration?: null,
      baalGas?: null,
      selfSponsor?: null,
      timestamp?: null,
      details?: null
    ): SubmitProposalEventFilter;
    SubmitProposal(
      proposal?: BigNumberish | null,
      proposalDataHash?: BytesLike | null,
      votingPeriod?: null,
      proposalData?: null,
      expiration?: null,
      baalGas?: null,
      selfSponsor?: null,
      timestamp?: null,
      details?: null
    ): SubmitProposalEventFilter;

    "SubmitVote(address,uint256,uint256,bool)"(
      member?: string | null,
      balance?: null,
      proposal?: BigNumberish | null,
      approved?: boolean | null
    ): SubmitVoteEventFilter;
    SubmitVote(
      member?: string | null,
      balance?: null,
      proposal?: BigNumberish | null,
      approved?: boolean | null
    ): SubmitVoteEventFilter;

    "TargetSet(address,address)"(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;
    TargetSet(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;
  };

  estimateGas: {
    adminLock(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorLock(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    isGovernor(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    isManager(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    lockAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lootPaused(overrides?: CallOverrides): Promise<BigNumber>;

    lootToken(overrides?: CallOverrides): Promise<BigNumber>;

    managerLock(overrides?: CallOverrides): Promise<BigNumber>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sharesPaused(overrides?: CallOverrides): Promise<BigNumber>;

    sharesToken(overrides?: CallOverrides): Promise<BigNumber>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    state(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestSponsoredProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lootPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRetentionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalOffering(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shamans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sharesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
